for(iii in 1:2)
for(jjj in 1:2)
output[iii,jjj,i] = kappa[iii,jjj]
}
output
}
PDE_parameters <- list(K = K_func, b = b_func, c = c_func, u = u_func)
observations <- as.vector(t(f_dati_k_inter)[,97:1])
grid_locations <- grid_mesh[!is.na(observations),]
deleted <- which(is.na(observations))
observations <- observations[!is.na(observations)]
lambdat = seq(-10,10,1)
lambda = 10^lambdat
smooth_aniso <- smooth.FEM.PDE.sv.basis(locations = grid_locations, observations, FEMbasis=BasisObj, lambda=lambda, GCV=TRUE, CPP_CODE = TRUE, PDE_parameters = PDE_parameters)
#save
source("C:\\Users\\utente\\Documents\\R\\Tesi\\Dublin\\function.R")
tabella(smooth_aniso, BasisObj, lambda, observations)
warnings()
dim(smooth_aniso$fit.FEM$coeff)
dim(observations)
length(observations)
observations <- as.vector(t(f_dati_k_inter)[,97:1])
grid_locations <- grid_mesh[!is.na(observations),]
deleted <- which(is.na(observations))
obs <- observations
observations <- observations[!is.na(observations)]
source("C:\\Users\\utente\\Documents\\R\\Tesi\\Dublin\\function.R")
tabella(smooth_aniso, BasisObj, lambda, obs)
source("C:\\Users\\utente\\Documents\\R\\Tesi\\Dublin\\function.R")
tabella(smooth_aniso, BasisObj, lambda, obs)
require(stats); require(graphics)
bs(women$height, df = 5)
library(splines)
require(stats); require(graphics)
bs(women$height, df = 5)
plot(women, xlab = "Height (in)", ylab = "Weight (lb)")
ht <- seq(57, 73, length.out = 200)
lines(ht, predict(fm1, data.frame(height = ht)))
x11()
plot(women, xlab = "Height (in)", ylab = "Weight (lb)")
ht <- seq(57, 73, length.out = 200)
lines(ht, predict(fm1, data.frame(height = ht)))
summary(fm1 <- lm(weight ~ bs(height, df = 5), data = women))
plot(women, xlab = "Height (in)", ylab = "Weight (lb)")
ht <- seq(57, 73, length.out = 200)
lines(ht, predict(fm1, data.frame(height = ht)))
install.package("Rcpp")
library(devtools)
install.package("Rcpp")
install_package("Rcpp")
install.packages("Rcpp")
rm(list=ls())
graphics.off()
set.seed(272)
library(RgoogleMaps)
library(fields)
library(fdaPDE2)
library(car)
library(beepr)
############################## CARICO DATI ######################
# SPACE
load("C:\\Users\\utente\\Documents\\R\\Tesi\\DatiLavoriSanga_Mara\\dati_telecom.RData")
dati[dati<0] <- NA
X <- t(dati)  # righe=pixel, colonne=tempi
# ritaglio solo questo istante temporale
k <-  32
slice <- X[,k]
dati_k <- matrix(data=slice, nrow=righe, ncol=colonne, byrow=TRUE)
#zoommo sull'area urbana
dati_k_inter <- dati_k[78:174,77:185]  # valori che mi ha dato Paolo
load("C:\\Users\\utente\\Documents\\R\\Tesi\\DatiLavoriSanga_Mara\\variabili_grafico_inter.Rdata")
load("C:\\Users\\utente\\Documents\\R\\Tesi\\DatiLavoriSanga_Mara\\Mappe.RData")
# load("C:/Users/Mara/Documents/DatiLavoriSanga/variabili_grafico_inter.Rdata")
#trasformazione logaritmica sui dati per avere una rappresentazione più efficiente
f_dati_k_inter <- dati_k_inter #sign(dati_k_inter)*log(abs(dati_k_inter)+1)
#visualizzazione
# temp <- t(dati_k_inter)[,97:1]
# windows()
# PlotOnStaticMap(Map11,add = FALSE,TrueProj=F)
# image.plot(xmod,ymod,sign(temp)*log(abs(temp)+1),col=rainbow(1000,alpha=0.66)[1:700],add=T,legend.mar=3.5,zlim=range(c(sign(temp)*log(abs(temp)+1)),na.rm=T))
# Objects for triangulation
grid_mesh <- expand.grid(xmod,ymod)
# Now I triangulate
mesh <- create.MESH.2D(nodes=grid_mesh, order = 1)
Triang <- mesh$triangles
BasisObj <- create.FEM.basis(mesh)
velocita = 4
matlab_output <- as.matrix(read.table("C:\\Users\\utente\\Documents\\R\\Tesi\\sottodominio_6_Mara\\velocita_4\\MilanoD_princ_100.txt"))
x_grid <- seq(from=min(xmod),to=max(xmod),length=101)[-1]
y_grid <- seq(from=min(ymod),to=max(ymod),length=101)[-1]
b_func<-function(points)
{
output = array(0, c(2, nrow(points)))
for (i in 1:nrow(points))
output[,i] = 0
output
}
c_func<-function(points)
{
rep(c(0), nrow(points))
}
u_func<-function(points)
{
rep(c(0), nrow(points))
}
K_func<-function(points)
{
output = array(0, c(2, 2, nrow(points)))
for (i in 1:nrow(points)){
vert <- which(points[i,1]<=x_grid)[1]
orizz <- 101-which(points[i,2]<=y_grid)[1]
indice <- which(matlab_output[,1]==orizz & matlab_output[,2]==vert)
kappa <- matrix(data=c(0,-1,1,0),nrow=2,ncol=2)%*%matrix(data=matlab_output[indice,3:6],nrow=2,ncol=2)%*%t(matrix(data=c(0,-1,1,0),nrow=2,ncol=2))
if(is.na(kappa)||is.infinite(kappa))
kappa <- matrix(data=c(1,0,0,1),nrow=2,ncol=2)
for(iii in 1:2)
for(jjj in 1:2)
output[iii,jjj,i] = kappa[iii,jjj]
}
output
}
PDE_parameters <- list(K = K_func, b = b_func, c = c_func, u = u_func)
############     SMOOTHING NO COVARIATE    ###################
observations <- as.vector(t(f_dati_k_inter)[,97:1])
grid_locations <- grid_mesh[!is.na(observations),]
deleted <- which(is.na(observations))
obs <- observations
observations <- observations[!is.na(observations)]
lambdat = seq(-10,10,1)
lambda = 10^lambdat
ascissa
help(create.bspline)
??create.bspline
install.packages("fda")
setwd("C:/Users/utente/Downloads/fdaPDE22/fdaPDE2")
library(beepr)
library(devtools)
build()
install()
beep()
rm(list=ls())
graphics.off()
set.seed(272)
library(RgoogleMaps)
library(fields)
library(fdaPDE2)
library(car)
library(beepr)
############################## CARICO DATI ######################
# SPACE
load("C:\\Users\\utente\\Documents\\R\\Tesi\\DatiLavoriSanga_Mara\\dati_telecom.RData")
dati[dati<0] <- NA
X <- t(dati)  # righe=pixel, colonne=tempi
# ritaglio solo questo istante temporale
k <-  637
slice <- X[,k]
dati_k <- matrix(data=slice, nrow=righe, ncol=colonne, byrow=TRUE)
#zoommo sull'area urbana
dati_k_inter <- dati_k[78:174,77:185]  # valori che mi ha dato Paolo
load("C:\\Users\\utente\\Documents\\R\\Tesi\\DatiLavoriSanga_Mara\\variabili_grafico_inter.Rdata")
load("C:\\Users\\utente\\Documents\\R\\Tesi\\DatiLavoriSanga_Mara\\Mappe.RData")
# load("C:/Users/Mara/Documents/DatiLavoriSanga/variabili_grafico_inter.Rdata")
#trasformazione logaritmica sui dati per avere una rappresentazione più efficiente
f_dati_k_inter <- dati_k_inter #sign(dati_k_inter)*log(abs(dati_k_inter)+1)
#visualizzazione
# temp <- t(dati_k_inter)[,97:1]
# windows()
# PlotOnStaticMap(Map11,add = FALSE,TrueProj=F)
# image.plot(xmod,ymod,sign(temp)*log(abs(temp)+1),col=rainbow(1000,alpha=0.66)[1:700],add=T,legend.mar=3.5,zlim=range(c(sign(temp)*log(abs(temp)+1)),na.rm=T))
# Objects for triangulation
grid_mesh <- expand.grid(xmod,ymod)
# Now I triangulate
mesh <- create.MESH.2D(nodes=grid_mesh, order = 1)
Triang <- mesh$triangles
BasisObj <- create.FEM.basis(mesh)
velocita = 4
matlab_output <- as.matrix(read.table("C:\\Users\\utente\\Documents\\R\\Tesi\\sottodominio_6_Mara\\velocita_4\\MilanoD_princ_100.txt"))
x_grid <- seq(from=min(xmod),to=max(xmod),length=101)[-1]
y_grid <- seq(from=min(ymod),to=max(ymod),length=101)[-1]
b_func<-function(points)
{
output = array(0, c(2, nrow(points)))
for (i in 1:nrow(points))
output[,i] = 0
output
}
c_func<-function(points)
{
rep(c(0), nrow(points))
}
u_func<-function(points)
{
rep(c(0), nrow(points))
}
K_func<-function(points)
{
output = array(0, c(2, 2, nrow(points)))
for (i in 1:nrow(points)){
vert <- which(points[i,1]<=x_grid)[1]
orizz <- 101-which(points[i,2]<=y_grid)[1]
indice <- which(matlab_output[,1]==orizz & matlab_output[,2]==vert)
kappa <- matrix(data=c(0,-1,1,0),nrow=2,ncol=2)%*%matrix(data=matlab_output[indice,3:6],nrow=2,ncol=2)%*%t(matrix(data=c(0,-1,1,0),nrow=2,ncol=2))
if(is.na(kappa)||is.infinite(kappa))
kappa <- matrix(data=c(1,0,0,1),nrow=2,ncol=2)
for(iii in 1:2)
for(jjj in 1:2)
output[iii,jjj,i] = kappa[iii,jjj]
}
output
}
PDE_parameters <- list(K = K_func, b = b_func, c = c_func, u = u_func)
############     SMOOTHING NO COVARIATE    ###################
observations <- as.vector(t(f_dati_k_inter)[,97:1])
grid_locations <- grid_mesh[!is.na(observations),]
deleted <- which(is.na(observations))
obs <- observations
observations <- observations[!is.na(observations)]
lambdat = seq(-8,-6,0.25)
lambda = 10^lambdat
lambda = 1
smooth_aniso <- smooth.FEM.PDE.sv.basis(locations = grid_locations, observations, FEMbasis=BasisObj, lambda=lambda, GCV=TRUE, CPP_CODE = TRUE, PDE_parameters = PDE_parameters)
#save(smooth_aniso, file = "smoothaniso_lambda-10-10-1_nocov")
beep()
211146/2
21146/2
rm(list=ls())
graphics.off()
setwd("C:/Users/utente/Downloads/fdaPDE22/fdaPDE2")
library(beepr)
library(devtools)
build()
install()
beep()
rm(list=ls())
graphics.off()
set.seed(272)
library(RgoogleMaps)
library(fields)
library(fdaPDE2)
library(car)
library(beepr)
############################## CARICO DATI ######################
# SPACE
load("C:\\Users\\utente\\Documents\\R\\Tesi\\DatiLavoriSanga_Mara\\dati_telecom.RData")
dati[dati<0] <- NA
X <- t(dati)  # righe=pixel, colonne=tempi
# ritaglio solo questo istante temporale
k <-  637
slice <- X[,k]
dati_k <- matrix(data=slice, nrow=righe, ncol=colonne, byrow=TRUE)
#zoommo sull'area urbana
dati_k_inter <- dati_k[78:174,77:185]  # valori che mi ha dato Paolo
load("C:\\Users\\utente\\Documents\\R\\Tesi\\DatiLavoriSanga_Mara\\variabili_grafico_inter.Rdata")
load("C:\\Users\\utente\\Documents\\R\\Tesi\\DatiLavoriSanga_Mara\\Mappe.RData")
# load("C:/Users/Mara/Documents/DatiLavoriSanga/variabili_grafico_inter.Rdata")
#trasformazione logaritmica sui dati per avere una rappresentazione più efficiente
f_dati_k_inter <- dati_k_inter #sign(dati_k_inter)*log(abs(dati_k_inter)+1)
#visualizzazione
# temp <- t(dati_k_inter)[,97:1]
# windows()
# PlotOnStaticMap(Map11,add = FALSE,TrueProj=F)
# image.plot(xmod,ymod,sign(temp)*log(abs(temp)+1),col=rainbow(1000,alpha=0.66)[1:700],add=T,legend.mar=3.5,zlim=range(c(sign(temp)*log(abs(temp)+1)),na.rm=T))
# Objects for triangulation
grid_mesh <- expand.grid(xmod,ymod)
# Now I triangulate
mesh <- create.MESH.2D(nodes=grid_mesh, order = 1)
Triang <- mesh$triangles
BasisObj <- create.FEM.basis(mesh)
velocita = 4
matlab_output <- as.matrix(read.table("C:\\Users\\utente\\Documents\\R\\Tesi\\sottodominio_6_Mara\\velocita_4\\MilanoD_princ_100.txt"))
x_grid <- seq(from=min(xmod),to=max(xmod),length=101)[-1]
y_grid <- seq(from=min(ymod),to=max(ymod),length=101)[-1]
b_func<-function(points)
{
output = array(0, c(2, nrow(points)))
for (i in 1:nrow(points))
output[,i] = 0
output
}
c_func<-function(points)
{
rep(c(0), nrow(points))
}
u_func<-function(points)
{
rep(c(0), nrow(points))
}
K_func<-function(points)
{
output = array(0, c(2, 2, nrow(points)))
for (i in 1:nrow(points)){
vert <- which(points[i,1]<=x_grid)[1]
orizz <- 101-which(points[i,2]<=y_grid)[1]
indice <- which(matlab_output[,1]==orizz & matlab_output[,2]==vert)
kappa <- matrix(data=c(0,-1,1,0),nrow=2,ncol=2)%*%matrix(data=matlab_output[indice,3:6],nrow=2,ncol=2)%*%t(matrix(data=c(0,-1,1,0),nrow=2,ncol=2))
if(is.na(kappa)||is.infinite(kappa))
kappa <- matrix(data=c(1,0,0,1),nrow=2,ncol=2)
for(iii in 1:2)
for(jjj in 1:2)
output[iii,jjj,i] = kappa[iii,jjj]
}
output
}
PDE_parameters <- list(K = K_func, b = b_func, c = c_func, u = u_func)
############     SMOOTHING NO COVARIATE    ###################
observations <- as.vector(t(f_dati_k_inter)[,97:1])
grid_locations <- grid_mesh[!is.na(observations),]
deleted <- which(is.na(observations))
obs <- observations
observations <- observations[!is.na(observations)]
lambdat = seq(-8,-6,0.25)
lambda = 10^lambdat
lambda = 1
smooth_aniso <- smooth.FEM.PDE.sv.basis(locations = grid_locations, observations, FEMbasis=BasisObj, lambda=lambda, GCV=TRUE, CPP_CODE = TRUE, PDE_parameters = PDE_parameters)
#save(smooth_aniso, file = "smoothaniso_lambda-10-10-1_nocov")
beep()
smooth_aniso$time
rm(list=ls())
graphics.off()
rm(list=ls())
graphics.off()
setwd("C:/Users/utente/Downloads/fdaPDE22/fdaPDE2")
library(beepr)
library(devtools)
build()
install()
beep()
rm(list=ls())
graphics.off()
set.seed(272)
library(RgoogleMaps)
library(fields)
library(fdaPDE2)
library(car)
library(beepr)
############################## CARICO DATI ######################
# SPACE
load("C:\\Users\\utente\\Documents\\R\\Tesi\\DatiLavoriSanga_Mara\\dati_telecom.RData")
dati[dati<0] <- NA
X <- t(dati)  # righe=pixel, colonne=tempi
# ritaglio solo questo istante temporale
k <-  637
slice <- X[,k]
dati_k <- matrix(data=slice, nrow=righe, ncol=colonne, byrow=TRUE)
#zoommo sull'area urbana
dati_k_inter <- dati_k[78:174,77:185]  # valori che mi ha dato Paolo
load("C:\\Users\\utente\\Documents\\R\\Tesi\\DatiLavoriSanga_Mara\\variabili_grafico_inter.Rdata")
load("C:\\Users\\utente\\Documents\\R\\Tesi\\DatiLavoriSanga_Mara\\Mappe.RData")
# load("C:/Users/Mara/Documents/DatiLavoriSanga/variabili_grafico_inter.Rdata")
#trasformazione logaritmica sui dati per avere una rappresentazione più efficiente
f_dati_k_inter <- dati_k_inter #sign(dati_k_inter)*log(abs(dati_k_inter)+1)
#visualizzazione
# temp <- t(dati_k_inter)[,97:1]
# windows()
# PlotOnStaticMap(Map11,add = FALSE,TrueProj=F)
# image.plot(xmod,ymod,sign(temp)*log(abs(temp)+1),col=rainbow(1000,alpha=0.66)[1:700],add=T,legend.mar=3.5,zlim=range(c(sign(temp)*log(abs(temp)+1)),na.rm=T))
# Objects for triangulation
grid_mesh <- expand.grid(xmod,ymod)
# Now I triangulate
mesh <- create.MESH.2D(nodes=grid_mesh, order = 1)
Triang <- mesh$triangles
BasisObj <- create.FEM.basis(mesh)
velocita = 4
matlab_output <- as.matrix(read.table("C:\\Users\\utente\\Documents\\R\\Tesi\\sottodominio_6_Mara\\velocita_4\\MilanoD_princ_100.txt"))
x_grid <- seq(from=min(xmod),to=max(xmod),length=101)[-1]
y_grid <- seq(from=min(ymod),to=max(ymod),length=101)[-1]
b_func<-function(points)
{
output = array(0, c(2, nrow(points)))
for (i in 1:nrow(points))
output[,i] = 0
output
}
c_func<-function(points)
{
rep(c(0), nrow(points))
}
u_func<-function(points)
{
rep(c(0), nrow(points))
}
K_func<-function(points)
{
output = array(0, c(2, 2, nrow(points)))
for (i in 1:nrow(points)){
vert <- which(points[i,1]<=x_grid)[1]
orizz <- 101-which(points[i,2]<=y_grid)[1]
indice <- which(matlab_output[,1]==orizz & matlab_output[,2]==vert)
kappa <- matrix(data=c(0,-1,1,0),nrow=2,ncol=2)%*%matrix(data=matlab_output[indice,3:6],nrow=2,ncol=2)%*%t(matrix(data=c(0,-1,1,0),nrow=2,ncol=2))
if(is.na(kappa)||is.infinite(kappa))
kappa <- matrix(data=c(1,0,0,1),nrow=2,ncol=2)
for(iii in 1:2)
for(jjj in 1:2)
output[iii,jjj,i] = kappa[iii,jjj]
}
output
}
PDE_parameters <- list(K = K_func, b = b_func, c = c_func, u = u_func)
############     SMOOTHING NO COVARIATE    ###################
observations <- as.vector(t(f_dati_k_inter)[,97:1])
grid_locations <- grid_mesh[!is.na(observations),]
deleted <- which(is.na(observations))
obs <- observations
observations <- observations[!is.na(observations)]
lambda = 10^-8
smooth_aniso <- smooth.FEM.PDE.sv.basis(locations = grid_locations, observations, FEMbasis=BasisObj, lambda=lambda, GCV=TRUE, CPP_CODE = TRUE, PDE_parameters = PDE_parameters)
#save(smooth_aniso, file = "smoothaniso_lambda-10-10-1_nocov")
beep()
rm(list=ls())
graphics.off()
setwd("C:/Users/utente/Downloads/fdaPDE22/fdaPDE2")
library(beepr)
library(devtools)
build()
install()
beep()
rm(list=ls())
graphics.off()
set.seed(272)
library(RgoogleMaps)
library(fields)
library(fdaPDE2)
library(car)
library(beepr)
############################## CARICO DATI ######################
# SPACE
load("C:\\Users\\utente\\Documents\\R\\Tesi\\DatiLavoriSanga_Mara\\dati_telecom.RData")
dati[dati<0] <- NA
X <- t(dati)  # righe=pixel, colonne=tempi
# ritaglio solo questo istante temporale
k <-  637
slice <- X[,k]
dati_k <- matrix(data=slice, nrow=righe, ncol=colonne, byrow=TRUE)
#zoommo sull'area urbana
dati_k_inter <- dati_k[78:174,77:185]  # valori che mi ha dato Paolo
load("C:\\Users\\utente\\Documents\\R\\Tesi\\DatiLavoriSanga_Mara\\variabili_grafico_inter.Rdata")
load("C:\\Users\\utente\\Documents\\R\\Tesi\\DatiLavoriSanga_Mara\\Mappe.RData")
# load("C:/Users/Mara/Documents/DatiLavoriSanga/variabili_grafico_inter.Rdata")
#trasformazione logaritmica sui dati per avere una rappresentazione più efficiente
f_dati_k_inter <- dati_k_inter #sign(dati_k_inter)*log(abs(dati_k_inter)+1)
#visualizzazione
# temp <- t(dati_k_inter)[,97:1]
# windows()
# PlotOnStaticMap(Map11,add = FALSE,TrueProj=F)
# image.plot(xmod,ymod,sign(temp)*log(abs(temp)+1),col=rainbow(1000,alpha=0.66)[1:700],add=T,legend.mar=3.5,zlim=range(c(sign(temp)*log(abs(temp)+1)),na.rm=T))
# Objects for triangulation
grid_mesh <- expand.grid(xmod,ymod)
# Now I triangulate
mesh <- create.MESH.2D(nodes=grid_mesh, order = 1)
Triang <- mesh$triangles
BasisObj <- create.FEM.basis(mesh)
velocita = 4
matlab_output <- as.matrix(read.table("C:\\Users\\utente\\Documents\\R\\Tesi\\sottodominio_6_Mara\\velocita_4\\MilanoD_princ_100.txt"))
x_grid <- seq(from=min(xmod),to=max(xmod),length=101)[-1]
y_grid <- seq(from=min(ymod),to=max(ymod),length=101)[-1]
b_func<-function(points)
{
output = array(0, c(2, nrow(points)))
for (i in 1:nrow(points))
output[,i] = 0
output
}
c_func<-function(points)
{
rep(c(0), nrow(points))
}
u_func<-function(points)
{
rep(c(0), nrow(points))
}
K_func<-function(points)
{
output = array(0, c(2, 2, nrow(points)))
for (i in 1:nrow(points)){
vert <- which(points[i,1]<=x_grid)[1]
orizz <- 101-which(points[i,2]<=y_grid)[1]
indice <- which(matlab_output[,1]==orizz & matlab_output[,2]==vert)
kappa <- matrix(data=c(0,-1,1,0),nrow=2,ncol=2)%*%matrix(data=matlab_output[indice,3:6],nrow=2,ncol=2)%*%t(matrix(data=c(0,-1,1,0),nrow=2,ncol=2))
if(is.na(kappa)||is.infinite(kappa))
kappa <- matrix(data=c(1,0,0,1),nrow=2,ncol=2)
for(iii in 1:2)
for(jjj in 1:2)
output[iii,jjj,i] = kappa[iii,jjj]
}
output
}
PDE_parameters <- list(K = K_func, b = b_func, c = c_func, u = u_func)
############     SMOOTHING NO COVARIATE    ###################
observations <- as.vector(t(f_dati_k_inter)[,97:1])
grid_locations <- grid_mesh[!is.na(observations),]
deleted <- which(is.na(observations))
obs <- observations
observations <- observations[!is.na(observations)]
lambdat = seq(-8,-6,0.25)
lambda = 10^lambdat
lambda = 10^-8
smooth_aniso <- smooth.FEM.PDE.sv.basis(locations = grid_locations, observations, FEMbasis=BasisObj, lambda=lambda, GCV=TRUE, CPP_CODE = TRUE, PDE_parameters = PDE_parameters)
#save(smooth_aniso, file = "smoothaniso_lambda-10-10-1_nocov")
beep()
source("C:\\Users\\utente\\Documents\\R\\Tesi\\mypackage\\R\\Dublin\\function.R")
source("C:\\Users\\utente\\Documents\\R\\Tesi\\Dublin\\function.R")
tabella(smooth_aniso, BasisObj, lambda, obs)
source("C:\\Users\\utente\\Documents\\R\\Tesi\\Dublin\\function.R")
tabella(smooth_aniso, BasisObj, lambda, obs)
dim(smooth_aniso$fit.FEM$coeff[!is.na(observations),])
size(smooth_aniso$fit.FEM$coeff[!is.na(observations),])
length(smooth_aniso$fit.FEM$coeff[!is.na(observations),])
length(observations[!is.na(observations),])
length(observations[!is.na(observations)])
smooth_aniso$edf
smooth_aniso$gcv
smooth_aniso$GCV
